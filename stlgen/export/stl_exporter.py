"""
STL exporter class for generating STL files.

This module contains the STLExporter class that handles export
of geometric data to STL files in both ASCII and binary formats.
"""

import numpy as np
from collections import OrderedDict
from typing import List, Sequence, Optional, Union, Tuple
import struct


class STLExporter:
    """
    Exports geometric data to STL files.
    
    This class replaces the legacy STL_Generator.py functions
    with a more robust and object-oriented approach.
    """
    
    def __init__(self, tolerance: float = 1e-5):
        """
        Initialize STL exporter.
        
        Args:
            tolerance: Tolerance for vertex deduplication
        """
        self.tolerance = tolerance
    
    def deduplicate_vertices(
        self, 
        blocks: List[Sequence[Sequence[np.ndarray]]]
    ) -> Tuple[np.ndarray, List[List[int]]]:
        """
        Deduplicate vertices from blocks of triangular faces.
        
        Args:
            blocks: List of blocks, each containing triangular faces
            
        Returns:
            Tuple of (unique_vertices, triangle_indices)
        """
        def key(pt: np.ndarray) -> tuple:
            """Integer key for tolerance-based deduplication."""
            return tuple(np.round(pt / self.tolerance).astype(int))
        
        # Build unique vertex pool
        vertex_pool: OrderedDict[tuple, tuple] = OrderedDict()
        triangles_idx = []
        
        for block in blocks:
            for tri in block:
                idxs = []
                for p in tri:
                    p = np.asarray(p, dtype=float)
                    k = key(p)
                    if k not in vertex_pool:
                        vertex_pool[k] = (len(vertex_pool), p)
                    idxs.append(vertex_pool[k][0])
                triangles_idx.append(idxs)
        
        # Convert pool to array
        vertices = np.array([rec[1] for rec in vertex_pool.values()])
        
        return vertices, triangles_idx
    
    def write_ascii_stl(
        self,
        blocks: List[Sequence[Sequence[np.ndarray]]],
        filename: str,
        solid_name: str = "stl_export"
    ) -> None:
        """
        Write blocks to ASCII STL file.
        
        This replaces the legacy save_blocks_to_stl function.
        
        Args:
            blocks: List of blocks containing triangular faces
            filename: Output filename
            solid_name: Name of the solid in STL file
        """
        # Deduplicate vertices
        vertices, triangles_idx = self.deduplicate_vertices(blocks)
        
        # Write ASCII STL
        with open(filename, "w") as f:
            f.write(f"solid {solid_name}\n")
            
            for i1, i2, i3 in triangles_idx:
                v1, v2, v3 = vertices[[i1, i2, i3]]
                
                # Compute normal vector
                normal = np.cross(v2 - v1, v3 - v1)
                normal_length = np.linalg.norm(normal)
                if normal_length > 0:
                    normal = normal / normal_length
                else:
                    normal = np.array([0, 0, 1])  # Default normal
                
                # Write facet
                f.write(f"  facet normal {normal[0]:.9e} {normal[1]:.9e} {normal[2]:.9e}\n")
                f.write("    outer loop\n")
                for v in (v1, v2, v3):
                    f.write(f"      vertex {v[0]:.9e} {v[1]:.9e} {v[2]:.9e}\n")
                f.write("    endloop\n  endfacet\n")
            
            f.write(f"endsolid {solid_name}\n")
        
        print(
            f"ASCII-STL written: {filename}\n"
            f"  • Unique vertices: {len(vertices)}\n"
            f"  • Triangles: {len(triangles_idx)}"
        )
    
    def write_binary_stl(
        self,
        blocks: List[Sequence[Sequence[np.ndarray]]],
        filename: str
    ) -> None:
        """
        Write blocks to binary STL file.
        
        Args:
            blocks: List of blocks containing triangular faces
            filename: Output filename
        """
        # Deduplicate vertices
        vertices, triangles_idx = self.deduplicate_vertices(blocks)
        
        # Write binary STL
        with open(filename, "wb") as f:
            # Write header (80 bytes)
            header = b"Binary STL file generated by STLExporter" + b"\x00" * 40
            f.write(header[:80])
            
            # Write number of triangles (4 bytes)
            f.write(struct.pack("<I", len(triangles_idx)))
            
            # Write triangles
            for i1, i2, i3 in triangles_idx:
                v1, v2, v3 = vertices[[i1, i2, i3]]
                
                # Compute normal vector
                normal = np.cross(v2 - v1, v3 - v1)
                normal_length = np.linalg.norm(normal)
                if normal_length > 0:
                    normal = normal / normal_length
                else:
                    normal = np.array([0, 0, 1])
                
                # Write normal (12 bytes: 3 floats)
                f.write(struct.pack("<fff", normal[0], normal[1], normal[2]))
                
                # Write vertices (36 bytes: 9 floats)
                for v in (v1, v2, v3):
                    f.write(struct.pack("<fff", v[0], v[1], v[2]))
                
                # Write attribute byte count (2 bytes)
                f.write(struct.pack("<H", 0))
        
        print(
            f"Binary STL written: {filename}\n"
            f"  • Unique vertices: {len(vertices)}\n"
            f"  • Triangles: {len(triangles_idx)}"
        )
    
    def write_stl(
        self,
        blocks: List[Sequence[Sequence[np.ndarray]]],
        filename: str,
        solid_name: str = "stl_export",
        format: str = "ascii"
    ) -> None:
        """
        Write blocks to STL file in specified format.
        
        Args:
            blocks: List of blocks containing triangular faces
            filename: Output filename
            solid_name: Name of the solid (ASCII only)
            format: Output format ("ascii" or "binary")
        """
        if format.lower() == "ascii":
            self.write_ascii_stl(blocks, filename, solid_name)
        elif format.lower() == "binary":
            self.write_binary_stl(blocks, filename)
        else:
            raise ValueError(f"Unsupported format: {format}. Use 'ascii' or 'binary'")
    
    def __repr__(self) -> str:
        """String representation of the exporter."""
        return f"STLExporter(tolerance={self.tolerance})"
